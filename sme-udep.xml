<!--
     This file contains a cascade of XSLT transformations to turn 
     dependency trees in Giellatekno format to Universal Dependencies.
-->
<transfer>
  <def-rule comment="Switch order with chained auxiliaries and main verb">
    <template match="NODE[(@si='FAUX' or @si='S←') and NODE[@si='IAUX' and NODE[@si='IAUX' and NODE[@si='IMV']]]]">
      <copy>
        <copy-of select="NODE[@si='IAUX']/NODE[@si='IAUX']/NODE[@si='IMV']/@*"/>
        <NODE>
          <copy-of select="@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <apply-templates select="NODE[@si='IAUX']/*[@si!='IAUX']"/>
        <apply-templates select="NODE[@si!='IAUX']"/>
        <NODE>
          <copy-of select="NODE[@si='IAUX']/NODE[@si='IAUX']/@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <NODE>
          <copy-of select="NODE[@si='IAUX']/@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <apply-templates select="NODE[@si='IAUX']/NODE[@si='IAUX']/NODE[@si='IMV']/NODE"/>
      </copy>
    </template> 
  </def-rule>


  <def-rule comment="Switch order with chained auxiliaries and main verb">
    <template match="NODE[(@si='FAUX' or @si='S←') and NODE[@si='IAUX' and NODE[@si='IMV']]]">
      <copy>
        <copy-of select="NODE[@si='IAUX']/NODE[@si='IMV']/@*"/>
        <NODE>
          <copy-of select="@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <apply-templates select="NODE[@si='IAUX']/*[@si!='IMV']"/>
        <apply-templates select="NODE[@si!='IAUX']"/>
        <NODE>
          <copy-of select="NODE[@si='IAUX']/@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <apply-templates select="NODE[@si='IAUX']/NODE[@si='IMV']/NODE"/>
      </copy>
    </template> 
  </def-rule>

  <!-- This deals with a parsing error where the final verb is IAUX -->
  <def-rule comment="Switch order with chained auxiliaries and main verb">
    <template match="NODE[@si='FAUX' and NODE[(@si='IAUX' and @lem='leat') and NODE[(@si='IAUX' and contains(@mi,'|PrfPrc'))]]]">
      <copy>
        <copy-of select="NODE[@si='IAUX']/NODE[@si='IAUX']/@*"/>
        <NODE>
          <copy-of select="@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <apply-templates select="NODE[@si='IAUX']/*[@si!='IAUX']"/>
        <apply-templates select="NODE[@si!='IAUX']"/>
        <NODE>
          <copy-of select="NODE[@si='IAUX']/@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <apply-templates select="NODE[@si='IAUX']/NODE[@si='IAUX']/NODE"/>
      </copy>
    </template> 
  </def-rule>


  <def-rule comment="Switch order of subordinate auxiliary and main verb">
    <template match="NODE[@si='FS-IAUX' and NODE[@si='FS-IMV']]">
      <copy>
        <copy-of select="NODE[@si='FS-IMV']/@*"/>
        <NODE>
          <copy-of select="@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <apply-templates select="NODE[@si!='FS-IMV']"/>
        <apply-templates select="NODE[@si='FS-IMV']/NODE"/>
      </copy>
    </template> 
  </def-rule>



  <def-rule comment="Switch order of auxiliary and main verb">
    <template match="NODE[@si='FAUX' and NODE[@si='IMV']]">
      <copy>
        <copy-of select="NODE[@si='IMV']/@*"/>
        <NODE>
          <copy-of select="@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <apply-templates select="NODE[@si!='IMV']"/>
        <apply-templates select="NODE[@si='IMV']/NODE"/>
      </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for clausal objects which are auxiliaries with main verb dependent attaching to finites">
    <template match="//NODE[(@si='FS-VFIN←' or @si='FS-→VFIN' or @si='FS-VFIN') and contains(@mi, 'V|') and NODE[@si='FS-IMV']]">
      <copy>
        <copy-of select="NODE[@si='FS-IMV']/@*[name()!='si']"/>
        <attr name="si"><value-of select="@si"/></attr>
        <NODE>
          <copy-of select="@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <apply-templates select="NODE[@si!='FS-IMV']"/>
        <apply-templates select="NODE[@si='FS-IMV']/NODE"/>
      </copy>

    </template> 
  </def-rule>

  <def-rule comment="Change for clausal objects which are auxiliaries with main verb dependent attaching to finites">
    <template match="//NODE[(@si='FS-←OBJ' or @si='FS-OBJ→' or @si='FS-OBJ') and contains(@mi, 'V|') and NODE[@si='FS-IMV']]">
      <copy>
        <copy-of select="NODE[@si='FS-IMV']/@*[name()!='si']"/>
        <attr name="si">ccomp</attr>
        <NODE>
          <copy-of select="@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <apply-templates select="NODE[@si!='FS-IMV']"/>
        <apply-templates select="NODE[@si='FS-IMV']/NODE"/>
      </copy>

    </template> 
  </def-rule>

  <def-rule comment="Change for clausal objects which are auxiliaries with main verb dependent attaching to nouns">
    <template match="//NODE[(@si='FS-N←' or @si='FS-→N' or @si='FS-N') and NODE[(@si='FS-IMV' or @si='IMV' or @si='FS-N←IMV')]]">
      <copy>
        <copy-of select="NODE[(@si='FS-IMV' or @si='IMV' or @si='FS-N←IMV')]/@*[name()!='si']"/>
        <attr name="si">acl:relcl</attr>
        <NODE>
          <copy-of select="@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <apply-templates select="NODE[@si!='FS-IMV'][@si!='IMV'][@si!='FS-N←IMV']"/>
        <apply-templates select="NODE[(@si='FS-IMV' or @si='IMV' or @si='FS-N←IMV')]/NODE"/>
      </copy>

    </template> 
  </def-rule>

  <def-rule comment="Change for clausal objects which are auxiliaries with main verb dependent attaching to finites">
    <template match="//NODE[(@si='FS-←ADVL' or @si='FS-ADVL→' or @si='FS-ADVL') and contains(@mi, 'V|') and NODE[@si='FS-IMV']]">
      <copy>
        <copy-of select="NODE[@si='FS-IMV']/@*[name()!='si']"/>
        <attr name="si">advcl</attr>
        <NODE>
          <copy-of select="@*[name()!='si']"/>
          <attr name="si">aux</attr>
        </NODE>
        <apply-templates select="NODE[@si!='FS-IMV']"/>
        <apply-templates select="NODE[@si='FS-IMV']/NODE"/>
      </copy>

    </template> 
  </def-rule>



  <!-- [leat [[sullii] 50 [olbmo]] [boahtán]] -->
  <def-rule comment="Switch order of numeral and genitive complement">
    <template match="NODE[contains(@mi, 'Num') and NODE[@si='Num←']]">
      <copy>
        <copy-of select="NODE[@si='Num←']/@*[name()!='si']"/>
        <attr name="si"><value-of select="@si"/></attr>
        <NODE>
          <copy-of select="@*[name()!='si']"/>
          <attr name="si">nummod</attr>
          <apply-templates select=".//NODE[@si='→Num']"/>
        </NODE>
        <NODE>
          <copy-of select="NODE/NODE/@*"/>
        </NODE>
        <apply-templates select="NODE[contains(@mi, 'Num') and NODE[@si!='Num←']]"/>
        <apply-templates select=".//NODE[@si!='Num←' and @si!='→Num']"/>
      </copy>
    </template> 
  </def-rule>

<!--@@@
  <def-rule comment="Change relation genitive NP-modifiers that are under adjectives">
    <template match="//NODE[@si='→N' and NODE[(@si='→A' or @si='→Num') and (contains(@mi, '|Gen') or contains(@mi, '|Attr'))]]">
        <copy>
          <apply-templates select="@*"/>
        </copy>
        <copy>
        <apply-templates select="NODE[(@si='→A' or @si='→Num')]/@*[name()!='si']"/>
        <attr name="si">nmod:poss</attr>
        <apply-templates select="NODE[(@si!='→A' and @si!='→Num')]/*"/>
        </copy>
    </template> 
  </def-rule>
@@@-->

  <def-rule comment="Switch order of adposition and complement">
    <template match="NODE[(@si='←ADVL' or @si='ADVL→' or @si='ADVL' or @si='N←') and NODE[(@si='→P' or @si='P←') and generate-id(ancestor::NODE[1]) = generate-id(current())]]">
      <copy>
        <copy-of select="NODE[(@si='→P' or @si='P←') and generate-id(ancestor::NODE[1]) = generate-id(current())]/@*"/>
        <NODE>
          <attr name="si">case</attr>
          <copy-of select="@*[name()!='si']"/>
        </NODE>
        <copy-of select="NODE[@si!='→P' and @si !='P←']"/>
        <apply-templates select="NODE[(@si='→P' or @si='P←') and generate-id(ancestor::NODE[1]) = generate-id(current())]/NODE"/>
      </copy>
    </template> 
  </def-rule>

  <def-rule coment="Change the relation of the daughter of the first main verb in a VP coordination">
    <template match="//NODE[contains(@si, 'MV') and contains(ancestor::NODE[1]/@si, 'MV') and ancestor::NODE[1]/NODE[@si='CVP' and @mi='CC']]">
      <copy> 
        <copy-of select="@*[name()!='si']"/>
        <attr name="si">conj</attr>
        <apply-templates select="*"/>
      </copy> 
    </template>
  </def-rule>


  <def-rule coment="Change the relation of the daughter of the first conjunction that matches in @si to be @conj">
    <template match="//NODE[@si = ancestor::NODE[1]/@si and ancestor::NODE[1]/NODE[@si='CVP']]">
      <copy> 
        <copy-of select="@*[name()!='si']"/>
        <attr name="si">conj</attr>
        <apply-templates select="*"/>
      </copy> 
    </template>
  </def-rule>


  <def-rule comment="Switch order of subordinating conjunction in comparison complement">
    <template match="NODE[@si='CNP' and NODE[@si='COMP-CS←']]">
      <copy>
        <copy-of select="NODE[@si='COMP-CS←']/@*[name()!='si']"/>
        <attr name="si">advcl</attr>
        <NODE> 
          <apply-templates select=".//NODE[@si!='CNP' and @si!='COMP-CS←']"/>
        </NODE> 
        <NODE> 
          <copy-of select="@*[name()!='si']"/>
        <attr name="si">mark</attr>
        </NODE> 
      </copy>
    </template> 
  </def-rule>



  <def-rule comment="Change for preconjunctions">
    <template match="//NODE[@si='CNP' and NODE[@si='→CC']]">
        <copy>
          <NODE>
          <copy-of select="@*"/>
          </NODE>
          <NODE>
          <copy-of select="NODE/@*[name()!='si']"/>
          <attr name="si">cc:preconj</attr>
          </NODE>
        </copy>
    </template> 
  </def-rule>

  <def-rule coment="Change the relation of the daughter of the first conjunction that matches in @si to be @conj">
    <template match="//NODE[@si = ancestor::NODE[1]/@si and ancestor::NODE[1]/NODE[@si='CNP']]">
      <copy> 
        <copy-of select="@*[name()!='si']"/>
        <attr name="si">conj</attr>
        <apply-templates select="*"/>
      </copy> 
    </template>
  </def-rule>


  <def-rule comment="Switch order of predicate and copula">
    <template match="NODE[@lem='leat' and NODE[(@si='←SPRED' or @si='SPRED→')]]">
      <copy>
        <copy-of select="NODE[(@si='←SPRED' or @si='SPRED→')]/@*[name()!='si']"/>
        <attr name="si"><value-of select="@si"/></attr>
        <NODE>
          <copy-of select="@*[name()!='si']"/>
          <attr name="si">cop</attr>
        </NODE>
        <copy-of select="NODE[@si!='←SPRED' and @si!='SPRED→']"/>
        <apply-templates select="NODE[(@si='←SPRED' or @si='SPRED→')]/NODE"/>
      </copy>
    </template> 
  </def-rule>


  <def-rule comment="A clause with a relative pronoun is @acl:relcl">
    <template match="//NODE[@si='FS-N←' and (NODE[contains(@mi, 'Pron|Rel')] or NODE/NODE[contains(@mi, 'Pron|Rel')])]">
        <copy>
        <attr name="si">acl:relcl</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="A finite verb clause headed by a speech verb is @ccomp">
    <template match="//NODE[@si = 'FMV' and ancestor::NODE[1][@si='FMVdic']]">
      <copy> 
        <copy-of select="@*[name()!='si']"/>
        <attr name="si">ccomp</attr>
        <apply-templates select="*"/>
      </copy> 
    </template>
  </def-rule>

  <def-rule comment="Change relation for co-ordinating conjunctions">
    <template match="//NODE[(@si='CNP' or @si='CVP') and @mi='CC']">
        <copy>
        <attr name="si">cc</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation for finite adverbial subclauses">
    <template match="//NODE[(@si='FS-←ADVL' or @si='FS-ADVL→')]">
        <copy>
        <attr name="si">advcl</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation for word introducing FS-ADVL">
    <template match="//NODE[@si='CVP' and @mi='CS']">
        <copy>
        <attr name="si">mark</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation separated compound">
    <template match="//NODE[(@si='→N' or @si='N←') and contains(@mi, '|RCmpnd')]">
        <copy>
        <attr name="si">compound</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation adverbial modifier of NP">
    <template match="//NODE[(@si='→N' or @si='N←') and (@mi='Adv' or contains(@mi, 'Adv|'))]">
        <copy>
        <attr name="si">advmod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for demonstrative pronouns">
    <template match="//NODE[(@si='→N' or @si='→A' or @si='→Num') and (contains(@mi, 'Pron|Dem') or contains(@mi, '|Attr'))]">
        <copy>
        <attr name="si">det</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>



  <def-rule comment="Change relation adjectival (not attributive) NP-modifiers">
    <template match="//NODE[@si='→N' and (contains(@mi, 'A|Sg') or contains(@mi, 'A|Pl'))]">
        <copy>
        <attr name="si">amod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>


  <def-rule comment="Change relation numeral NP-modifiers">
    <template match="//NODE[(@si='→N' or @si='N←') and contains(@mi, 'Num')]">
        <copy>
        <attr name="si">nummod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation attributive NP-modifiers">
    <template match="//NODE[@si='→N' and contains(@mi, 'N|Prop') and contains(@mi, '|Attr')]">
        <copy>
        <attr name="si">flat</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation attributive NP-modifiers">
    <template match="//NODE[(@si='→N' or @si='N←') and contains(@mi, '|ABBR') and NODE/@si='flat']">
        <copy>
        <attr name="si">flat</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation attributive NP-modifiers">
    <template match="//NODE[@si='N←' and contains(@mi, 'N|ABBR') and ancestor::NODE[1]/NODE[@si='flat']]">
        <copy>
        <attr name="si">flat</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation attributive NP-modifiers">
    <template match="//NODE[@si='→N' and contains(@mi, '|Attr')]">
        <copy>
        <attr name="si">amod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation attributive NP-modifiers of proper nouns to @compound:nn">
    <template match="//NODE[@si='→N' and contains(@mi, 'N|') and contains(ancestor::NODE[1]/@mi, 'N|Prop')]">
        <copy>
        <attr name="si">compound:nn</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation attributive participles | CHECK: acl:relcl?">
    <template match="//NODE[@si='→N' and (contains(@mi, '|PrfPrc') or contains(@mi, 'PrsPrc'))]">
        <copy>
        <attr name="si">acl</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation attributive participles | CHECK: acl:relcl?">
    <template match="//NODE[(@si='→N' or @si='N←') and contains(@mi, '|Inf')]">
        <copy>
        <attr name="si">acl</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>


  <def-rule comment="Change relation locative NP-modifiers">
    <template match="//NODE[(@si='N←' or @si='Pron←') and (contains(@mi, '|Loc') or contains(@mi, '|Ill') or contains(@mi, '|Com'))]">
        <copy>
        <attr name="si">nmod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation genitive NP-modifiers">
    <template match="//NODE[@si='→N' and contains(@mi, '|Gen')]">
        <copy>
        <attr name="si">nmod:poss</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation for infinitives ad adverbials">
    <template match="//NODE[(@si='←ADVL' or @si='ADVL→') and contains(@mi, 'V|')]">
        <copy>
        <attr name="si">advcl</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation adverb adverbial ">
    <template match="//NODE[(@si='←ADVL' or @si='ADVL→') and (@mi='Adv' or contains(@mi, 'Adv|') or contains(@mi, '|Adv') or contains(@mi, '|Ess'))]">
        <copy>
        <attr name="si">advmod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation NPs in oblique cases">
    <template match="//NODE[(@si='←ADVL' or @si='ADVL→') and (contains(@mi, 'N|') or contains(@mi, 'Pron|') or contains(@mi, 'Num|') and @misc='hab')]">
        <copy>
        <attr name="si">nmod:own</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>


  <def-rule comment="Change relation NPs in oblique cases">
    <template match="//NODE[(@si='←ADVL' or @si='ADVL→') and (contains(@mi, 'N|') or contains(@mi, 'Pron|') or contains(@mi, 'Num|'))]">
        <copy>
        <attr name="si">nmod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation locative adverbial ">
    <template match="//NODE[@si='←ADVL' or @si='ADVL→' and (contains(@mi, '|Loc') or contains(@mi, '|Ill'))]">
        <copy>
        <attr name="si">nmod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation verbal genitive">
    <template match="//NODE[(@si='←ADVL' or @si='ADVL→') and contains(@mi, '|VGen')]">
        <copy>
        <attr name="si">advcl</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for infinitives linking to adjectives">
    <template match="//NODE[@si='A←' and contains(@mi, '|Inf')]">
        <copy>
        <attr name="si">xcomp</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for reflexive pronouns">
    <template match="//NODE[(@si='→N' or @si='→A' or @si='→Pron' or @si='N←' or @si='A←' or @si='Pron←') and contains(@mi, 'Pron|Refl')]">
        <copy>
        <attr name="si">det</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation for adverbs that modify pronouns">
    <template match="//NODE[@si='→A' and contains(@mi, 'A|Attr')]">
        <copy>
        <attr name="si">amod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>


  <def-rule comment="Change relation for attributives that modify numerals">
    <template match="//NODE[@si='→Num' and contains(@mi, '|Attr')]">
        <copy>
        <attr name="si">compound</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation for attributives that modify numerals">
    <template match="//NODE[(@si='→Num' or @si='→A') and contains(@mi, '|Gen')]">
        <copy>
        <attr name="si">nmod:poss</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>



  <def-rule comment="Change relation for adverbs that modify non-verbs/nominals">
    <template match="//NODE[(@si='→Pron' or @si='→A' or @si='→Num') and contains(@mi, 'Adv')]">
        <copy>
        <attr name="si">advmod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>


  <def-rule comment="Change relation 'particles' and interjections">
    <template match="//NODE[@si='PCLE' or @si='INTERJ']">
        <copy>
        <attr name="si">discourse</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation for pronouns depending on pronouns">
    <template match="//NODE[(@si='Pron←' or @si='→Pron') and contains(@mi,'Pron|')]">
        <copy>
        <attr name="si">appos</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation for nouns depending on pronouns">
    <template match="//NODE[(@si='Pron←' or @si='→Pron') and contains(@mi,'N|')]">
        <copy>
        <attr name="si">appos</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation for adjectives depending on pronouns">
    <template match="//NODE[(@si='Pron←' or @si='→Pron') and contains(@mi,'A|')]">
        <copy>
        <attr name="si">amod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation apposition">
    <template match="//NODE[contains(@si, 'APP')]">
        <copy>
        <attr name="si">appos</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation vocative">
    <template match="//NODE[@si='VOC']">
        <copy>
        <attr name="si">vocative</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation punctuation">
    <template match="//NODE[@si='CLB' or @si='PUNCT']">
        <copy>
        <attr name="si">punct</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change relation for non-finite clausal objects"> <!-- TODO: xcomp/ccomp -->
    <template match="//NODE[@si='ICL-OBJ']">
        <copy>
        <attr name="si">ccomp</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>


  <def-rule comment="Change relation for finite clausal subjects">
    <template match="//NODE[@si='FS-SUBJ']">
        <copy>
        <attr name="si">csubj</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>


  <def-rule comment="Change relation for non-finite clausal subjects">
    <template match="//NODE[@si='ICL-SUBJ']">
        <copy>
        <attr name="si">csubj</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>


  <def-rule comment="Change relation for clausal subjects">
    <template match="//NODE[(@si='SUBJ→' or @si='←SUBJ') and contains(@mi, 'V|')]">
        <copy>
        <attr name="si">csubj</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>


  <def-rule comment="Change for non-clausal subjects">
    <template match="//NODE[(@si='SUBJ→' or @si='←SUBJ') and not(contains(@mi, 'V|'))]">
        <copy>
        <attr name="si">nsubj</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for preposition complements which are derived verbs">
    <template match="//NODE[(@si='P←' or @si='→P') and contains(@mi, 'V|') ]">
        <copy>
        <attr name="si">advcl</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for preposition complements">
    <template match="//NODE[(@si='P←' or @si='→P') and not(contains(@mi, 'V|'))]">
        <copy>
        <attr name="si">nmod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for clausal objects">
    <template match="//NODE[(@si='←OBJ' or @si='OBJ→') and contains(@mi, 'V|')]">
        <copy>
        <attr name="si">ccomp</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for adverb modifiers of adverbials">
    <template match="//NODE[(@si='→ADVL' or @si='ADVL←') and (@mi='Adv' or contains(@mi, 'Adv|'))]">
        <copy>
        <attr name="si">advmod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>


  <def-rule comment="Change for non-clausal objects">
    <template match="//NODE[(@si='←OBJ' or @si='OBJ→') and not(contains(@mi, 'V|'))]">
        <copy>
        <attr name="si">dobj</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <!-- Rules for arguments of non-finites -->

  <def-rule comment="Change for adverbials attaching to non-finites">
    <template match="//NODE[(@si='-F←ADVL' or @si='-FADVL→') and contains(@mi, 'V|')]">
        <copy>
        <attr name="si">advcl</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for adverbials attaching to non-finites">
    <template match="//NODE[(@si='-F←ADVL' or @si='-FADVL→') and contains(@mi, 'Adv')]">
        <copy>
        <attr name="si">advmod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for adverbials attaching to non-finites">
    <template match="//NODE[(@si='-F←ADVL' or @si='-FADVL→') and not(contains(@mi, 'V|')) and not(contains(@mi, 'Adv'))]">
        <copy>
        <attr name="si">nmod</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for subjects attaching to non-finites">
    <template match="//NODE[(@si='-F←SUBJ' or @si='-FSUBJ→') and not(contains(@mi, 'V|'))]">
        <copy>
        <attr name="si">nsubj</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for clausal objects attaching to finites">
    <template match="//NODE[(@si='FS-←OBJ' or @si='FS-OBJ→' or @si='FS-OBJ') and contains(@mi, 'V|')]">
        <copy>
        <attr name="si">ccomp</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for clausal objects attaching to non-finites">
    <template match="//NODE[(@si='-F←OBJ' or @si='-FOBJ→') and contains(@mi, 'V|')]">
        <copy>
        <attr name="si">ccomp</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for objects attaching to non-finites">
    <template match="//NODE[(@si='-F←OBJ' or @si='-FOBJ→') and not(contains(@mi, 'V|'))]">
        <copy>
        <attr name="si">dobj</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change subject predicates in essive or nominative case">
    <template match="//NODE[(@si='←SPRED' or @si='SPRED→' or @si='SPRED') and (contains(@mi, '|Ess') or contains(@mi, '|Nom'))]">
        <copy>
        <attr name="si">xcomp</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change subject predicates for numeral phrases">
    <template match="//NODE[(@si='←SPRED' or @si='SPRED→' or @si='SPRED') and contains(@mi, '|Gen') and NODE[contains(@mi, 'Num|')]]">
        <copy>
        <attr name="si">xcomp</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change object predicates in essive case">
    <template match="//NODE[(@si='←OPRED' or @si='OPRED→') and contains(@mi, '|Ess')]">
        <copy>
        <attr name="si">xcomp:obj</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change predicate predicates">
    <template match="//NODE[(@si='←PPRED' or @si='PPRED→')]">
        <copy>
        <attr name="si">xcomp:pred</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>


  <def-rule comment="Change for negative verb">
    <template match="//NODE[@lem='ii' and contains(@mi, 'V|IV|Neg')]">
        <copy>
        <attr name="si">aux:neg</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for finite nominal modifiers">
    <template match="//NODE[@si='FS-N←']">
        <copy>
        <attr name="si">acl</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Change for sentential modifiers">
    <template match="//NODE[@si='S←']">
        <copy>
        <attr name="si">parataxis</attr>
        <apply-templates select="@*[name()!='si'] | *"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Two finite VPs with a comma is parataxis">
    <template match="NODE[@si='FMV' and ancestor::NODE[@si='FMV'] and not(NODE[@si='CVP'])]">
        <copy>
          <attr name="si">parataxis</attr>
          <apply-templates select="* | @*[name()!='si']"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="If you have a structure with a noun fragment, go with parataxis">
    <template match="//NODE[@si='HNOUN' and ancestor::NODE[(@si='IMV' or @si = 'FMV' or @si = 'HNOUN')]]">
        <copy>
        <attr name="si">parataxis</attr>
        <apply-templates select="* | @*[name()!='si']"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="If you have a structure VP , VP with no explicit coordination, go with parataxis">
    <template match="//NODE[(@si='IMV' or @si='HNOUN' or @si = 'FMV') and ancestor::NODE[(@si='IMV' or @si='HNOUN' or @si = 'FMV' or @si='FMVdic')]]">
        <copy>
        <attr name="si">parataxis</attr>
        <apply-templates select="* | @*[name()!='si']"/>
        </copy>
    </template> 
  </def-rule>

  <def-rule comment="Relabel the root relation">
    <template match="//SENTENCE/NODE[@si='IMV' or @si='IAUX' or @si='HNOUN' or @si = 'FMV' or @si = 'FMVdic' or @si='FS-VFIN←']">
        <copy>
        <attr name="si">root</attr>
        <apply-templates select="* | @*[name()!='si']"/>
        </copy>
    </template> 
  </def-rule>

  <!-- CLEANUP: Delete nodes that don't have any surface index. -->

<!--
  <def-rule comment="">
    <template match="//NODE[NODE[(@si='mark' or @si='cc') and NODE[@lem=',']]]">
        <copy>
          <apply-templates select="@*"/>
          <NODE>
            <copy-of select="NODE/NODE[@lem=',']/@*"/>
          </NODE>
          <NODE>
          <apply-templates select="NODE[(@si='mark' or @si='cc') and NODE[@lem=',']]/@*"/>
          <apply-templates select="NODE[(@si='mark' or @si='cc')]/NODE[@lem!=',']"/>
          </NODE>
          <apply-templates select="NODE[(@si!='mark' and @si!='cc')]"/>
        </copy>
    </template> 
  </def-rule>
-->


  <def-rule comment="">
    <template match="//NODE[@ord='' or not(@ord)]">
        <apply-templates select="*"/>
    </template> 
  </def-rule>


</transfer>
